import os
import unittest

from copy import deepcopy

from codechecker_report_converter.report import BugPathEvent, \
    BugPathPosition, File, Range, Report, report_file
from codechecker_report_converter.report.reports import \
    get_mentioned_original_files


gen_sarif_dir_path = os.path.join(
    os.path.dirname(__file__), 'sarif_test_files', 'gen_sarif')

SRC_FILES = [
    File(os.path.join(gen_sarif_dir_path, 'semgrep.code_after_ret.py')),
    File(os.path.join(gen_sarif_dir_path, 'semgrep_string_concat.py'))]

after_return_skel = Report(
    'python.lang.maintainability.\
    return.code-after-unconditional-return',
    report_hash='f7b5072d428e890f2d309217f3ead16f',
    category='',
    type='',
    bug_path_events=[],
    bug_path_positions=[],
    notes=[],
    macro_expansions=[]
)

string_concat_skel = Report(
    SRC_FILES[1], 2, 25, 'python.lang.correctness.common-mistakes.string-concat\
    -in-list.string-concat-in-list',
    report_hash='79e31a6ba028f0b7d9779faf4a6cb9cf',
    category='',
    type='',
    bug_path_events=[],
    bug_path_positions=[],
    notes=[],
    macro_expansions=[]
)

# how to run
# semgrep tests/unit/parser/sarif/sarif_test_files/gen_sarif/semgrep_string_concat.py --config=r/python.lang.correctness

class SarifParserTestCaseNose(unittest.TestCase):
    """Test the parsing of the sarif generated by multiple semgrep
    and shellcheck reports."""

    @classmethod
    def setup_class(cls):
        """Initialize test source file."""
        # Bugs found by these checkers in the test source files.
        cls.__shellcheck_found_checker_names = [2034, 1066]
        cls.__semgrep_found_checker_names = [
            "python.lang.correctness.common-mistakes.string-concat-in-list. \
            string-concat-in-list",
            "python.lang.maintainability.\
            return.code-after-unconditional-return"
        ]

        # Already generated plist files for the tests.
        cls.__this_dir = os.path.dirname(__file__)
        cls.__sarif_test_files = os.path.join(
            cls.__this_dir, 'sarif_test_files')

    def test_empty_file(self):
        """Plist file is empty."""
        empty_plist = os.path.join(self.__sarif_test_files, 'empty_file')
        reports = report_file.get_reports(empty_plist)
        self.assertEqual(reports, [])

    def test_no_bug_file(self):
        """There was no bug in the checked file."""
        no_bug_sarif = os.path.join(
            self.__sarif_test_files, 'semgrep_noerror.sarif')
        reports = report_file.get_reports(no_bug_sarif)
        self.assertEqual(reports, [])

    def test_with_errors_semgrep(self):
        """ There are bugs in the sarif files """
        sarif_with_errors = os.path.join(
            self.__sarif_test_files, 'semgrep_with_errors.sarif')
        reports = report_file.get_reports(sarif_with_errors)
        self.assertEqual(len(reports), 2)

        files = get_mentioned_original_files(reports)
        self.assertEqual(files, set(SRC_FILES))

        for report in reports:
            # Checker name should be in the plist file.
            self.assertNotEqual(report.checker_name, 'NOT FOUND')
            self.assertIn(report.checker_name, 
                self.semgrep__found_checker_names)

            if report.checker_name == 'python.lang.correctness.common-mistakes.string-concat-in-list. \
            string-concat-in-list':

                self.assertEqual(report, string_concat_skel)
                self.assertEqual(report.bug_path_events,
                string_concat_skel.bug_path_events)
                self.assertEqual(report.bug_path_positions,
                string_concat_skel.bug_path_positions)

            if report.checker_name == 'python.lang.maintainability.\
            return.code-after-unconditional-return':
                skel = deepcopy(after_return_skel)
                skel.report_hash = 'a6d3464f8aab9eb31a8ea7e167e84322'

                self.assertEqual(report, skel)
                self.assertEqual(
                    report.bug_path_events, skel.bug_path_events)
                self.assertEqual(
                    report.bug_path_positions, skel.bug_path_positions)
